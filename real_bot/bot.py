from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

company_unique_id = 1

# –ì–∏–±–∫–æ–µ –º–µ–Ω—é (–ª–µ–≥–∫–æ –æ–±–Ω–æ–≤–ª—è—Ç—å)
MENU = {
    'drinks': [
        {'id': '–∫–æ—Ñ–µ', 'label': '‚òï –ö–æ—Ñ–µ'},
        {'id': '—á–∞–π', 'label': 'üçµ –ß–∞–π'},
    ],
    'types': {
        '–∫–æ—Ñ–µ': [
            {'id': '—ç—Å–ø—Ä–µ—Å—Å–æ', 'label': '–≠—Å–ø—Ä–µ—Å—Å–æ'},
            {'id': '–ª–∞—Ç—Ç–µ', 'label': '–õ–∞—Ç—Ç–µ'},
        ],
        '—á–∞–π': [
            {'id': '—á—ë—Ä–Ω—ã–π', 'label': '–ß—ë—Ä–Ω—ã–π'},
            {'id': '–∑–µ–ª—ë–Ω—ã–π', 'label': '–ó–µ–ª—ë–Ω—ã–π'},
        ],
    },
    'additives': [
        {'id': '—Å–∞—Ö–∞—Ä', 'label': '–°–∞—Ö–∞—Ä üßÇ', 'order_label': '—Å–∞—Ö–∞—Ä–æ–º'},
        {'id': '–∫–æ—Ä–∏—Ü–∞', 'label': '–ö–æ—Ä–∏—Ü–∞ üå∞', 'order_label': '–∫–æ—Ä–∏—Ü–µ–π'},
    ],
    'syrups': [
        {'id': '–≤–∞–Ω–∏–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø', 'label': '–í–∞–Ω–∏–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø üçØ', 'order_label': '–≤–∞–Ω–∏–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': '–∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø', 'label': '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø', 'order_label': '–∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': '—à–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å–∏—Ä–æ–ø', 'label': '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å–∏—Ä–æ–ø', 'order_label': '—à–æ–∫–æ–ª–∞–¥–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': '–∫–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø', 'label': '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø', 'order_label': '–∫–ª–µ–Ω–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º'},
    ],
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü—Ä–∏–≤–µ—Ç üòä"), KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ‚òï")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ MENU)
def order_keyboard(user_data):
    drink = user_data.get('drink', None)
    drink_type = user_data.get('drink_type', None)
    additives = user_data.get('additives', [])

    keyboard = []

    # –°–µ–∫—Ü–∏—è 1: –ù–∞–ø–∏—Ç–∫–∏
    keyboard.append([InlineKeyboardButton("üçπ –ù–∞–ø–∏—Ç–æ–∫", callback_data='noop')])  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    drink_buttons = [
        InlineKeyboardButton(
            f"{'‚úÖ ' if drink == item['id'] else ''}{item['label']}",
            callback_data=f"drink_{item['id']}"
        ) for item in MENU['drinks']
    ]
    keyboard.append(drink_buttons)
    keyboard.append([InlineKeyboardButton("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data='noop')])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –°–µ–∫—Ü–∏—è 2: –í–∏–¥—ã –Ω–∞–ø–∏—Ç–∫–∞
    if drink and drink in MENU['types']:
        keyboard.append([InlineKeyboardButton("üìã –í–∏–¥", callback_data='noop')])  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        type_buttons = [
            InlineKeyboardButton(
                f"{'‚úÖ ' if drink_type == item['id'] else ''}{item['label']}",
                callback_data=f"type_{item['id']}"
            ) for item in MENU['types'][drink]
        ]
        keyboard.append(type_buttons)
        keyboard.append([InlineKeyboardButton("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data='noop')])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –°–µ–∫—Ü–∏—è 3: –î–æ–±–∞–≤–∫–∏ –∏ —Å–∏—Ä–æ–ø—ã
    keyboard.append([InlineKeyboardButton("üßÇ –î–æ–±–∞–≤–∫–∏", callback_data='noop')])  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    additive_buttons = [
        InlineKeyboardButton(
            f"{'‚úÖ ' if item['id'] in additives else ''}{item['label']}",
            callback_data=f"additive_{item['id']}"
        ) for item in MENU['additives']
    ]
    keyboard.append(additive_buttons)
    syrup_buttons = [
        [
            InlineKeyboardButton(
                f"{'‚úÖ ' if item['id'] in additives else ''}{item['label']}",
                callback_data=f"additive_{item['id']}"
            ) for item in MENU['syrups'][i:i+2]
        ] for i in range(0, len(MENU['syrups']), 2)
    ]
    keyboard.extend(syrup_buttons)
    keyboard.append([InlineKeyboardButton("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data='noop')])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    keyboard.append([
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data='confirm'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])

    return InlineKeyboardMarkup(keyboard)

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üòä',
        reply_markup=main_menu_keyboard()
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        res = requests.post(
            'http://192.168.56.1:8000/api/validate/check/checkUser',
            json={'telId': update.message.from_user.id},
            timeout=5
        )
        logger.info(f"API /validate/check/checkUser response: {res.status_code}")
        greeting = "–ü—Ä–∏–≤–µ—Ç! üëã" if res.status_code == 200 else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
        await update.message.reply_text(
            f'{greeting} {update.effective_user.first_name}!',
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await update.message.reply_text(
            '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!',
            reply_markup=main_menu_keyboard()
        )

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
    await update.message.reply_text(
        '–°–æ–±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑:',
        reply_markup=order_keyboard(context.user_data)
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if query.data == 'noop':
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if query.data == 'cancel':
        user_data.clear()
        await query.edit_message_text(
            text="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=None
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞
    if query.data.startswith('drink_'):
        user_data['drink'] = query.data.split('_')[1]
        user_data.pop('drink_type', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–¥ –Ω–∞–ø–∏—Ç–∫–∞
        await query.edit_message_text(
            text="–°–æ–±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑:",
            reply_markup=order_keyboard(user_data)
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ –Ω–∞–ø–∏—Ç–∫–∞
    elif query.data.startswith('type_'):
        user_data['drink_type'] = query.data.split('_')[1]
        await query.edit_message_text(
            text="–°–æ–±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑:",
            reply_markup=order_keyboard(user_data)
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–æ–∫ –∏ —Å–∏—Ä–æ–ø–æ–≤
    elif query.data.startswith('additive_'):
        additive = query.data.replace('additive_', '')  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        user_data['additives'] = user_data.get('additives', [])
        if additive in user_data['additives']:
            user_data['additives'].remove(additive)
        else:
            user_data['additives'].append(additive)
        await query.edit_message_text(
            text="–°–æ–±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑:",
            reply_markup=order_keyboard(user_data)
        )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif query.data == 'confirm':
        if not user_data.get('drink') or not user_data.get('drink_type'):
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –∏ –µ–≥–æ –≤–∏–¥!", show_alert=True)
            return
        await process_order(query, user_data)

async def process_order(query, user_data):
    drink = user_data.get('drink', '–Ω–∞–ø–∏—Ç–æ–∫')
    drink_type = user_data.get('drink_type', '')
    additives = user_data.get('additives', [])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–æ–∫
    additives_text = []
    for additive in additives:
        # –ò—â–µ–º order_label –≤ additives –∏–ª–∏ syrups
        for item in MENU['additives'] + MENU['syrups']:
            if item['id'] == additive:
                additives_text.append(item['order_label'])
                break

    additives_display = "–±–µ–∑ –¥–æ–±–∞–≤–æ–∫" if not additives_text else "—Å " + ", ".join(additives_text)
    # –§–æ—Ä–º–∞—Ç: "–∫–æ—Ñ–µ —ç—Å–ø—Ä–µ—Å—Å–æ —Å —Å–∞—Ö–∞—Ä–æ–º, –∫–æ—Ä–∏—Ü–µ–π, –≤–∞–Ω–∏–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º"
    full_order = f"{drink} {drink_type} {additives_display}"

    try:
        response = requests.post(
            'http://192.168.56.1:8000/api/makeOrder',
            json={
                'tg_id': query.from_user.id,
                'company': company_unique_id,
                'order': full_order
            },
            timeout=5
        )
        response.raise_for_status()
        logger.info(f"API /makeOrder success: {full_order}, status: {response.status_code}")
        await query.edit_message_text(
            text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑: *{full_order.capitalize()}*!\n–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç! ‚è±Ô∏è",
            reply_markup=None,
            parse_mode='Markdown'
        )
        await query.message.reply_text(
            "–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë? üòä",
            reply_markup=main_menu_keyboard()
        )
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API /makeOrder: {str(e)}")
        await query.edit_message_text(
            text=f"üòì –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!",
            reply_markup=None
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )

    user_data.clear()

def main():
    app = ApplicationBuilder().token("7519915111:AAHVz5vBRDYiwaZrC22yMFHBqygUaBfV-JU").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r'^–ü—Ä–∏–≤–µ—Ç'), hello))
    app.add_handler(MessageHandler(filters.Regex(r'^–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'), start_order))
    app.add_handler(CallbackQueryHandler(handle_button))

    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        lambda update, ctx: update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
    ))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()