from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import requests

company_unique_id = 1


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü—Ä–∏–≤–µ—Ç üòä"), KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ‚òï")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏
def drink_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚òï –ö–æ—Ñ–µ", callback_data='coffee'),
         InlineKeyboardButton("üçµ –ß–∞–π", callback_data='tea')]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–±–∞–≤–∫–∞–º–∏
def additives_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–°–∞—Ö–∞—Ä üßÇ", callback_data='sugar'),
            InlineKeyboardButton("–ö–æ—Ä–∏—Ü–∞ üå∞", callback_data='cinnamon')
        ],
        [
            InlineKeyboardButton("–°–∏—Ä–æ–ø üçØ", callback_data='syrup'),
            InlineKeyboardButton("–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫ ‚úñÔ∏è", callback_data='no_additives')
        ]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∏–¥–∞–º–∏ —Å–∏—Ä–æ–ø–∞
def syrup_types_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–í–∞–Ω–∏–ª—å–Ω—ã–π", callback_data='vanilla'),
            InlineKeyboardButton("–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π", callback_data='caramel')
        ],
        [
            InlineKeyboardButton("–®–æ–∫–æ–ª–∞–¥–Ω—ã–π", callback_data='chocolate'),
            InlineKeyboardButton("–ö–ª–µ–Ω–æ–≤—ã–π", callback_data='maple')
        ]
    ])


async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üòä',
        reply_markup=main_menu_keyboard()
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        res = requests.post(
            'http://192.168.56.1:8000/api/validate/check/checkUser',
            json={'telId': update.message.from_user.id}
        )

        greeting = "–ü—Ä–∏–≤–µ—Ç! üëã" if res.status_code == 200 else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
        await update.message.reply_text(
            f'{greeting} {update.effective_user.first_name}!',
            reply_markup=main_menu_keyboard()
        )

    except Exception as e:
        await update.message.reply_text('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', reply_markup=main_menu_keyboard())


async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:',
        reply_markup=drink_keyboard()
    )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞
    if query.data in ['coffee', 'tea']:
        user_data['drink'] = query.data
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫–∏:",
            reply_markup=additives_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–æ–∫
    elif query.data in ['sugar', 'cinnamon', 'no_additives']:
        await process_additives(query, user_data)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏—Ä–æ–ø–∞
    elif query.data == 'syrup':
        user_data['need_syrup'] = True
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Ä–æ–ø–∞:",
            reply_markup=syrup_types_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∏—Ä–æ–ø–∞
    elif query.data in ['vanilla', 'caramel', 'chocolate', 'maple']:
        user_data['syrup'] = query.data
        await process_additives(query, user_data)


async def process_additives(query, user_data):
    drink = user_data.get('drink', '–Ω–∞–ø–∏—Ç–æ–∫')
    additives = []

    if 'syrup' in user_data:
        additives.append(f"—Å–∏—Ä–æ–ø {user_data['syrup']}")
    if 'sugar' in user_data:
        additives.append("—Å–∞—Ö–∞—Ä")
    if 'cinnamon' in user_data:
        additives.append("–∫–æ—Ä–∏—Ü–∞")

    additives_text = "–±–µ–∑ –¥–æ–±–∞–≤–æ–∫" if not additives else "—Å " + ", ".join(additives)

    try:
        full_order = f"{drink} {additives_text}"
        requests.post(
            'http://192.168.56.1:8000/api/makeOrder',
            json={
                'tg_id': query.from_user.id,
                'company': company_unique_id,
                'order': full_order
            }
        )
        await query.edit_message_text(
            text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑: {full_order.capitalize()}!\n–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç! ‚è±Ô∏è",
            reply_markup=None
        )
        await query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â—ë?",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

    user_data.clear()


def main():
    app = ApplicationBuilder().token("7519915111:AAHVz5vBRDYiwaZrC22yMFHBqygUaBfV-JU").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r'^–ü—Ä–∏–≤–µ—Ç'), hello))
    app.add_handler(MessageHandler(filters.Regex(r'^–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'), start_order))
    app.add_handler(CallbackQueryHandler(handle_button))

    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        lambda update, ctx: update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
    ))

    app.run_polling()

if __name__ == '__main__':
    main()