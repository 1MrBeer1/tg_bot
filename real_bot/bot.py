from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import requests
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = "7519915111:AAHVz5vBRDYiwaZrC22yMFHBqygUaBfV-JU"
COMPANY_UNIQUE_ID = 1
API_BASE_URL = 'http://192.168.56.1:8000'

# –ì–∏–±–∫–æ–µ –º–µ–Ω—é
MENU = {
    'drinks': [
        {'id': 'coffee', 'label': '‚òï –ö–æ—Ñ–µ', 'order_label': '–∫–æ—Ñ–µ'},
        {'id': 'tea', 'label': 'üçµ –ß–∞–π', 'order_label': '—á–∞–π'},
        {'id': 'season_menu', 'label': 'üåü –°–µ–∑–æ–Ω–Ω–æ–µ –ú–µ–Ω—é', 'order_label': '—Å–µ–∑–æ–Ω–Ω–æ–µ'}
    ],
    'drink_types': {
        'coffee': [
            {'id': 'americano', 'label': '–ê–º–µ—Ä–∏–∫–∞–Ω–æ', 'order_label': '–∞–º–µ—Ä–∏–∫–∞–Ω–æ'},
            {'id': 'latte', 'label': '–õ–∞—Ç—Ç–µ', 'order_label': '–ª–∞—Ç—Ç–µ'},
            {'id': 'cappuccino', 'label': '–ö–∞–ø—É—á–∏–Ω–æ', 'order_label': '–∫–∞–ø—É—á–∏–Ω–æ'},
            {'id': 'mochaccino', 'label': '–ú–æ–∫–∞—á–∏–Ω–æ', 'order_label': '–º–æ–∫–∞—á–∏–Ω–æ'},
        ],
        'tea': [
            {'id': 'black', 'label': '–ß—ë—Ä–Ω—ã–π', 'order_label': '—á—ë—Ä–Ω—ã–π'},
            {'id': 'green', 'label': '–ó–µ–ª—ë–Ω—ã–π', 'order_label': '–∑–µ–ª—ë–Ω—ã–π'},
        ],
        'season_menu': [
            {'id': 'gingerbread_coffee', 'label': '–ü—Ä—è–Ω–∏—á–Ω—ã–π –∫–æ—Ñ–µ', 'order_label': '–ø—Ä—è–Ω–∏—á–Ω—ã–π –∫–æ—Ñ–µ'},
            {'id': 'yellow_snow', 'label': '–ñ—ë–ª—Ç—ã–π —Å–Ω–µ–≥', 'order_label': '–∂—ë–ª—Ç—ã–π —Å–Ω–µ–≥'},
            {'id': 'pistachio', 'label': '–§–∏—Å—Ç–∞—à–∫–æ–≤—ã–π', 'order_label': '—Ñ–∏—Å—Ç–∞—à–∫–æ–≤—ã–π'},
        ]
    },
    'additives': [
        {'id': 'sugar', 'label': '–°–∞—Ö–∞—Ä üßÇ', 'order_label': '—Å–∞—Ö–∞—Ä–æ–º'},
        {'id': 'cinnamon', 'label': '–ö–æ—Ä–∏—Ü–∞ üå∞', 'order_label': '–∫–æ—Ä–∏—Ü–µ–π'},
        {'id': 'vanilla_syrup', 'label': '–í–∞–Ω–∏–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø üçØ', 'order_label': '–≤–∞–Ω–∏–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': 'caramel_syrup', 'label': '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø', 'order_label': '–∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': 'chocolate_syrup', 'label': '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å–∏—Ä–æ–ø', 'order_label': '—à–æ–∫–æ–ª–∞–¥–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': 'maple_syrup', 'label': '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø', 'order_label': '–∫–ª–µ–Ω–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º'},
    ],
    'volumes': [
        {'id': 'small', 'label': '–ú–∞–ª–µ–Ω—å–∫–∏–π (200 –º–ª)', 'order_label': '–º–∞–ª–µ–Ω—å–∫–∏–π'},
        {'id': 'medium', 'label': '–°—Ä–µ–¥–Ω–∏–π (300 –º–ª)', 'order_label': '—Å—Ä–µ–¥–Ω–∏–π'},
        {'id': 'large', 'label': '–ë–æ–ª—å—à–æ–π (400 –º–ª)', 'order_label': '–±–æ–ª—å—à–æ–π'},
    ]
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑"
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("–ü—Ä–∏–≤–µ—Ç üòä"), KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ‚òï")],[KeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ üìã")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏
def drink_keyboard():
    buttons = [
        [InlineKeyboardButton(item['label'], callback_data=f"drink_{item['id']}") for item in MENU['drinks'][i:i + 2]]
        for i in range(0, len(MENU['drinks']), 2)
    ]
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')])
    return InlineKeyboardMarkup(buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∏–¥–∞–º–∏ –Ω–∞–ø–∏—Ç–∫–∞
def drink_type_keyboard(drink_id):
    buttons = [
        [InlineKeyboardButton(item['label'], callback_data=f"type_{item['id']}") for item in MENU['drink_types'][drink_id][i:i + 2]]
        for i in range(0, len(MENU['drink_types'][drink_id]), 2)
    ]
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_drink'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    return InlineKeyboardMarkup(buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–±—ä—ë–º–∞–º–∏
def volume_keyboard():
    buttons = [
        [InlineKeyboardButton(item['label'], callback_data=f"volume_{item['id']}") for item in MENU['volumes'][i:i + 2]]
        for i in range(0, len(MENU['volumes']), 2)
    ]
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_type'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    return InlineKeyboardMarkup(buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–±–∞–≤–∫–∞–º–∏
def additives_keyboard(selected_additives=None):
    selected_additives = selected_additives or []
    buttons = [
        [InlineKeyboardButton(f"{'‚úÖ ' if item['id'] in selected_additives else ''}{item['label']}", callback_data=f"additive_{item['id']}") for item in MENU['additives'][i:i + 2]]
        for i in range(0, len(MENU['additives']), 2)
    ]
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_volume'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    buttons.append([InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data='confirm_additives')])
    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, *{update.effective_user.first_name}*! üòä –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    context.user_data['stage'] = 'drink'
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:', reply_markup=drink_keyboard())

async def last_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    try:
        response = requests.get(f'{API_BASE_URL}/api/getLastOrder?tg_id={user_id}', timeout=5)
        response.raise_for_status()
        last_order_data = response.json()
        if last_order_data:
            order_text = last_order_data['order']
            await update.message.reply_text(
                f"–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {order_text}\n–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ–≥–æ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–î–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat_{order_text}"),
                     InlineKeyboardButton("–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="cancel")]
                ])
            )
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞: {str(e)}")
        await update.message.reply_text("üòì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    if query.data == 'cancel':
        user_data.clear()
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
        return

    if query.data.startswith("repeat_"):
        order_text = query.data.replace("repeat_", "")
        try:
            response = requests.post(
                f'{API_BASE_URL}/api/makeOrder',
                json={'tg_id': query.from_user.id, 'company': COMPANY_UNIQUE_ID, 'order': order_text},
                timeout=5
            )
            response.raise_for_status()
            await query.edit_message_text(f"‚úÖ *–í–∞—à –∑–∞–∫–∞–∑*: {order_text}!\n–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç! ‚è±Ô∏è", parse_mode='Markdown')
            await query.message.reply_text("–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=main_menu_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            await query.edit_message_text(f"üòì –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
        return

    stage = user_data.get('stage', 'drink')

    # –í—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞
    if stage == 'drink' and query.data.startswith('drink_'):
        drink_id = query.data.replace('drink_', '')
        user_data['drink'] = drink_id
        user_data['stage'] = 'type'
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –≤–∏–¥ –Ω–∞–ø–∏—Ç–∫–∞:" if drink_id != 'season_menu' else "–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫:",
            reply_markup=drink_type_keyboard(drink_id)
        )

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–ø–∏—Ç–∫–∞
    elif stage == 'type':
        if query.data.startswith('type_'):
            user_data['drink_type'] = query.data.replace('type_', '')
            if user_data['drink'] == 'season_menu':
                await process_order(query, user_data)  # –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ–≥–æ
            else:
                user_data['stage'] = 'volume'
                await query.edit_message_text("–í—ã–±–µ—Ä–∏ –æ–±—ä—ë–º:", reply_markup=volume_keyboard())
        elif query.data == 'back_to_drink':
            user_data['stage'] = 'drink'
            user_data.pop('drink', None)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=drink_keyboard())
    # –í—ã–±–æ—Ä –æ–±—ä—ë–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ñ–µ –∏ —á–∞—è)
    elif stage == 'volume':
        if query.data.startswith('volume_'):
            user_data['volume'] = query.data.replace('volume_', '')
            user_data['additives'] = []
            user_data['stage'] = 'additives'
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–æ–±–∞–≤–∫–∏:", reply_markup=additives_keyboard())
        elif query.data == 'back_to_type':
            user_data['stage'] = 'type'
            user_data.pop('volume', None)
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏ –≤–∏–¥ –Ω–∞–ø–∏—Ç–∫–∞:",
                reply_markup=drink_type_keyboard(user_data['drink'])
            )

    # –í—ã–±–æ—Ä –¥–æ–±–∞–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ñ–µ –∏ —á–∞—è)
    elif stage == 'additives':
        if query.data.startswith('additive_'):
            additive = query.data.replace('additive_', '')
            if additive not in user_data['additives']:
                user_data['additives'].append(additive)
            else:
                user_data['additives'].remove(additive)
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏ –¥–æ–±–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=additives_keyboard(user_data['additives'])
            )
        elif query.data == 'confirm_additives':
            await process_order(query, user_data)
        elif query.data == 'back_to_volume':
            user_data['stage'] = 'volume'
            user_data.pop('additives', None)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –æ–±—ä—ë–º:", reply_markup=volume_keyboard())

async def process_order(query, user_data):
    drink = user_data.get('drink', '–Ω–∞–ø–∏—Ç–æ–∫')
    drink_type = user_data.get('drink_type', '')
    volume = user_data.get('volume', '')
    additives = user_data.get('additives', [])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
    drink_label = next((item['order_label'] for item in MENU['drinks'] if item['id'] == drink), drink)
    type_label = next((item['order_label'] for item in MENU['drink_types'].get(drink, []) if item['id'] == drink_type), drink_type)
    volume_label = next((item['order_label'] for item in MENU['volumes'] if item['id'] == volume), '') if volume else ''
    additives_text = [next((item['order_label'] for item in MENU['additives'] if item['id'] == additive), additive) for additive in additives]

    additives_display = "–±–µ–∑ –¥–æ–±–∞–≤–æ–∫" if not additives_text else "—Å " + ", ".join(additives_text)
    if drink == 'season_menu':
        full_order = f"{type_label}"
    else:
        full_order = f"{drink_label} {type_label} {volume_label} {additives_display}".strip()

    try:
        response = requests.post(
            f'{API_BASE_URL}/api/makeOrder',
            json={'tg_id': query.from_user.id, 'company': COMPANY_UNIQUE_ID, 'order': full_order},
            timeout=5
        )
        response.raise_for_status()
        await query.edit_message_text(
            f"‚úÖ *–í–∞—à –∑–∞–∫–∞–∑*: {full_order}!\n–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç! ‚è±Ô∏è",
            parse_mode='Markdown'
        )
        await query.message.reply_text("–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞: {str(e)}")
        await query.edit_message_text(f"üòì –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

    user_data.clear()

def main():
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    logger.info("Starting bot...")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r'^–ü—Ä–∏–≤–µ—Ç'), start))
    app.add_handler(MessageHandler(filters.Regex(r'^–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'), start_order))
    app.add_handler(MessageHandler(filters.Regex(r'^–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), last_order))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        lambda update, ctx: update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:", reply_markup=main_menu_keyboard())
    ))

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    loop = asyncio.get_event_loop()
    if loop.is_running():
        logger.warning("Event loop already running. Creating new loop.")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.run_until_complete(app.bot.delete_webhook(drop_pending_updates=True))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    logger.info("Polling started")
    app.run_polling(timeout=30, drop_pending_updates=True)

if __name__ == '__main__':
    main()