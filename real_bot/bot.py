from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = "7519915111:AAHVz5vBRDYiwaZrC22yMFHBqygUaBfV-JU"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
COMPANY_UNIQUE_ID = 1

# –ì–∏–±–∫–æ–µ –º–µ–Ω—é
MENU = {
    'drinks': [
        {'id': 'coffee', 'label': '‚òï –ö–æ—Ñ–µ', 'order_label': '–∫–æ—Ñ–µ'},
        {'id': 'tea', 'label': 'üçµ –ß–∞–π', 'order_label': '—á–∞–π'},
    ],
    'drink_types': {
        'coffee': [
            {'id': 'americano', 'label': '–ê–º–µ—Ä–∏–∫–∞–Ω–æ', 'order_label': '–∞–º–µ—Ä–∏–∫–∞–Ω–æ'},
            {'id': 'latte', 'label': '–õ–∞—Ç—Ç–µ', 'order_label': '–ª–∞—Ç—Ç–µ'},
            {'id': 'cappuccino', 'label': '–ö–∞–ø—É—á–∏–Ω–æ', 'order_label': '–∫–∞–ø—É—á–∏–Ω–æ'},
            {'id': 'mochaccino', 'label': '–ú–æ–∫–∞—á–∏–Ω–æ', 'order_label': '–º–æ–∫–∞—á–∏–Ω–æ'},
        ],
        'tea': [
            {'id': 'black', 'label': '–ß—ë—Ä–Ω—ã–π', 'order_label': '—á—ë—Ä–Ω—ã–π'},
            {'id': 'green', 'label': '–ó–µ–ª—ë–Ω—ã–π', 'order_label': '–∑–µ–ª—ë–Ω—ã–π'},
        ],
    },
    'additives': [
        {'id': 'sugar', 'label': '–°–∞—Ö–∞—Ä üßÇ', 'order_label': '—Å–∞—Ö–∞—Ä–æ–º'},
        {'id': 'cinnamon', 'label': '–ö–æ—Ä–∏—Ü–∞ üå∞', 'order_label': '–∫–æ—Ä–∏—Ü–µ–π'},
        {'id': 'vanilla_syrup', 'label': '–í–∞–Ω–∏–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø üçØ', 'order_label': '–≤–∞–Ω–∏–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': 'caramel_syrup', 'label': '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø', 'order_label': '–∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': 'chocolate_syrup', 'label': '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å–∏—Ä–æ–ø', 'order_label': '—à–æ–∫–æ–ª–∞–¥–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'},
        {'id': 'maple_syrup', 'label': '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø', 'order_label': '–∫–ª–µ–Ω–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º'},
    ],
}


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü—Ä–∏–≤–µ—Ç üòä"), KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ‚òï")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏
def drink_keyboard():
    buttons = [
        [InlineKeyboardButton(item['label'], callback_data=f"drink_{item['id']}") for item in MENU['drinks'][i:i + 2]]
        for i in range(0, len(MENU['drinks']), 2)
    ]
    buttons.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    return InlineKeyboardMarkup(buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∏–¥–∞–º–∏ –Ω–∞–ø–∏—Ç–∫–∞
def drink_type_keyboard(drink_id):
    buttons = [
        [InlineKeyboardButton(item['label'], callback_data=f"type_{item['id']}") for item in
         MENU['drink_types'][drink_id][i:i + 2]]
        for i in range(0, len(MENU['drink_types'][drink_id]), 2)
    ]
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_drink'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    return InlineKeyboardMarkup(buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–±–∞–≤–∫–∞–º–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
def additives_keyboard(selected_additives=None):
    selected_additives = selected_additives or []
    buttons = [
        [
            InlineKeyboardButton(
                f"{'‚úÖ ' if item['id'] in selected_additives else ''}{item['label']}",
                callback_data=f"additive_{item['id']}"
            ) for item in MENU['additives'][i:i + 2]
        ] for i in range(0, len(MENU['additives']), 2)
    ]
    buttons.append([InlineKeyboardButton("–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫ ‚úñÔ∏è", callback_data='no_additives')])
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_type'),
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data='confirm_additives'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    return InlineKeyboardMarkup(buttons)


async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, *{update.effective_user.first_name}*! üòä –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        res = requests.post(
            'http://192.168.56.1:8000/api/validate/check/checkUser',
            json={'telId': update.message.from_user.id},
            timeout=5
        )
        logger.info(f"API /validate/check/checkUser response: {res.status_code}")
        greeting = "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üëã" if res.status_code == 200 else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
        await update.message.reply_text(
            f'{greeting} *{update.effective_user.first_name}*!',
            reply_markup=main_menu_keyboard(),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await update.message.reply_text(
            'üòì –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!',
            reply_markup=main_menu_keyboard()
        )


async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    context.user_data['stage'] = 'drink'
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:',
        reply_markup=drink_keyboard()
    )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    if query.data == 'cancel':
        user_data.clear()
        await query.edit_message_text(
            text="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=None
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤
    stage = user_data.get('stage', 'drink')

    # –≠—Ç–∞–ø: –≤—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞
    if stage == 'drink' and query.data.startswith('drink_'):
        user_data['drink'] = query.data.replace('drink_', '')
        user_data['stage'] = 'type'
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –≤–∏–¥ –Ω–∞–ø–∏—Ç–∫–∞:",
            reply_markup=drink_type_keyboard(user_data['drink'])
        )

    # –≠—Ç–∞–ø: –≤—ã–±–æ—Ä –≤–∏–¥–∞ –Ω–∞–ø–∏—Ç–∫–∞
    elif stage == 'type':
        if query.data.startswith('type_'):
            user_data['drink_type'] = query.data.replace('type_', '')
            user_data['additives'] = user_data.get('additives', [])
            user_data['stage'] = 'additives'
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –¥–æ–±–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=additives_keyboard(user_data['additives'])
            )
        elif query.data == 'back_to_drink':
            user_data['stage'] = 'drink'
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:",
                reply_markup=drink_keyboard()
            )

    # –≠—Ç–∞–ø: –≤—ã–±–æ—Ä –¥–æ–±–∞–≤–æ–∫
    elif stage == 'additives':
        if query.data.startswith('additive_'):
            additive = query.data.replace('additive_', '')
            if additive not in user_data['additives']:
                user_data['additives'].append(additive)
            else:
                user_data['additives'].remove(additive)
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –¥–æ–±–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=additives_keyboard(user_data['additives'])
            )
        elif query.data == 'back_to_type':
            user_data['stage'] = 'type'
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –≤–∏–¥ –Ω–∞–ø–∏—Ç–∫–∞:",
                reply_markup=drink_type_keyboard(user_data['drink'])
            )
        elif query.data == 'no_additives':
            user_data['additives'] = []
            await process_additives(query, user_data)
        elif query.data == 'confirm_additives':
            await process_additives(query, user_data)


async def process_additives(query, user_data):
    drink = user_data.get('drink', '–Ω–∞–ø–∏—Ç–æ–∫')
    drink_type = user_data.get('drink_type', '')
    additives = user_data.get('additives', [])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
    drink_label = next((item['order_label'] for item in MENU['drinks'] if item['id'] == drink), drink)
    type_label = next((item['order_label'] for item in MENU['drink_types'].get(drink, []) if item['id'] == drink_type),
                      drink_type)
    additives_text = []
    for additive in additives:
        additive_label = next((item['order_label'] for item in MENU['additives'] if item['id'] == additive), additive)
        additives_text.append(additive_label)

    additives_display = "–±–µ–∑ –¥–æ–±–∞–≤–æ–∫" if not additives_text else "—Å " + ", ".join(additives_text)
    full_order = f"{drink_label} {type_label} {additives_display}"

    try:
        response = requests.post(
            'http://192.168.56.1:8000/api/makeOrder',
            json={
                'tg_id': query.from_user.id,
                'company': COMPANY_UNIQUE_ID,
                'order': full_order
            },
            timeout=5
        )
        response.raise_for_status()
        logger.info(f"API /makeOrder success: {full_order}, status: {response.status_code}")
        await query.edit_message_text(
            text=f"‚úÖ *–í–∞—à –∑–∞–∫–∞–∑*: {full_order.capitalize()}!\n–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç! ‚è±Ô∏è",
            reply_markup=None,
            parse_mode='Markdown'
        )
        await query.message.reply_text(
            "–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë? üòä",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        await query.edit_message_text(
            text=f"üòì –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!",
            reply_markup=None
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )

    user_data.clear()


def main():
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ TELEGRAM_TOKEN –≤ –∫–æ–¥–µ.")
        print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ TELEGRAM_TOKEN –≤ –∫–æ–¥–µ.")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # proxy = {"https": "http://your_proxy:port"}
    # app = ApplicationBuilder().token(TELEGRAM_TOKEN).http_client_kwargs({"proxies": proxy}).build()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r'^–ü—Ä–∏–≤–µ—Ç'), hello))
    app.add_handler(MessageHandler(filters.Regex(r'^–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'), start_order))
    app.add_handler(CallbackQueryHandler(handle_button))

    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        lambda update, ctx: update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
    ))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == '__main__':
    main()